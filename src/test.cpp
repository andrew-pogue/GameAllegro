#include "game.hpp"
#include <list>

void Game::load_test_player_fov()
{
    auto color = al_map_rgb(0, 255, 0);
    auto flag = ALLEGRO_ALIGN_CENTER;
    auto width = display_.get_width();
    auto height = display_.get_height();

    world_.entity("(0,0)")
        .set<CPosition>({0, 0, 0})
        .set<CText>({"(0,0)", color, flag})
        .add<CRender>();
    world_.entity("(+,+)")
        .set<CPosition>({width/2 - 8, height/2 - 8, 0})
        .set<CText>({"(+,+)", color, flag})
        .add<CRender>();
    world_.entity("(-,-)")
        .set<CPosition>({-width/2 + 8, -height/2 + 8, 0})
        .set<CText>({"(-,-)", color, flag})
        .add<CRender>();
    world_.entity("(+,0)")
        .set<CPosition>({width/2 - 8, 0, 0})
        .set<CText>({"(+,0)", color, flag})
        .add<CRender>();
    world_.entity("(-,0)")
        .set<CPosition>({-width/2 + 8, 0, 0})
        .set<CText>({"(-,0)", color, flag})
        .add<CRender>();
    world_.entity("(0,+)")
        .set<CPosition>({0, height/2 - 8, 0})
        .set<CText>({"(0,+)", color, flag})
        .add<CRender>();
    world_.entity("(0,-)")
        .set<CPosition>({0, -height/2 + 8, 0})
        .set<CText>({"(0,-)", color, flag})
        .add<CRender>();
    world_.entity("(+,-)")
        .set<CPosition>({width/2 - 8, -height/2 + 8, 0})
        .set<CText>({"(+,-)", color, flag})
        .add<CRender>();
    world_.entity("(-,+)")
        .set<CPosition>({-width/2 + 8, height/2 - 8, 0})
        .set<CText>({"(-,+)", color, flag})
        .add<CRender>();
}

void Game::foo() {

    std::list<std::string> map({
    "############################################################",
    "#..........................................................#",
    "#..........................................................#",
    "#..........................................................#",
    "#..........................................................#",
    "#......................................#####...............#",
    "#..........................................................#",
    "#..........................................................#",
    "#..........................................................#",
    "#..........................................................#",
    "#..........................................................#",
    "#..........................................................#",
    "#..........................................................#",
    "#..........................................................#",
    "#..........................................................#",
    "#..........................................................#",
    "#............................######........................#",
    "#............................#  / #........................#",
    "#............................#    #........................#",
    "#............................#    #........................#",
    "#............................#    #........................#",
    "#............................##+###........................#",
    "#..........................................................#",
    "#..........................................................#",
    "#..........................................................#",
    "#..........................................................#",
    "#..........................................................#",
    "#..........................................................#",
    "#..........................................................#",
    "#..........................................................#",
    "#..................##......................................#",
    "#..................#.......................................#",
    "#..................#.......................................#",
    "#..........................................................#",
    "#..........................................................#",
    "#..........................................................#",
    "#.............................######.......................#",
    "#..........................................................#",
    "#..........................................................#",
    "#..........................................................#",
    "#...............#..........................................#",
    "#...............#..........................................#",
    "#..............####........................................#",
    "#..........................................................#",
    "#..........................................................#",
    "############################################################",
    });

    int i = 0, j = 0;
    for (auto str : map) {
        for (auto c : str) {
            world_.entity()
                .set<CPosition>({(int)-(str.size()/2)+j, (int)(map.size()/2)-i, 0 })
                .set<CGlyph>({c, al_map_rgb(155,155,155)})
                .add<CRender>();
            j++;
        }
        i++;
    }
}