lazy loading with std::optional<T>

concurrency:
    thread for player input
    thread for updating game logic
    thread for rendering

ui text and elements that are attached to/follow the display
main menu and game menu
tab to change default game font
scroll to zoom in and out (increase/decrease font size)

font handling should be done by Game
every draw function can be put in one place
al_wrapper should only handle destroying of resources
template wrapper that accepts custom destroy function

entity have public debug bool that debugs that one entity
remove font from text (or turn into string)
keep color on text

make tetris
make classic space shoot-em up
make mario-like side-scroller
make classic roguelike
make action roguelike
make space sandbox shooter
make roguelike rpg
make civilization-like turn-based strategy
make xcom-like turn-based strategy
make aoe-like real-time strategy

game world position is in tiles not pixels
    so a position of (2,4,3) translates to:
        2 * g_tile_size
        4 * g_tile_size
        3 * g_tile_size
ui position is still in pixels
    such that
        x < g_window_width + g_fov_leeway
        y < g_window_height + g_fov_leeway
        x > - (g_window_width + g_fov_leeway)
        y > - (g_window_height + g_fov_leeway)
            these bounds refers to the display constraints
                entities outside of the display constrains aren't rendered


test flecs system lambda captures
test flecs event OnSet
Whats the differences between using on_demand versus using a query?
can you remove a component from within a query or system?