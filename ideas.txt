lazy loading with std::optional<T>

concurrency:
    thread for player input
    thread for updating game logic
    thread for rendering

ui text and elements that are attached to/follow the display
main menu and game menu
tab to change default game font
scroll to zoom in and out (increase/decrease font size)

font handling should be done by Game
every draw function can be put in one place
al_wrapper should only handle destroying of resources
template wrapper that accepts custom destroy function

entity have public debug bool that debugs that one entity
remove font from text (or turn into string)
keep color on text

make tetris
make classic space shoot-em up
make mario-like side-scroller
make classic roguelike
make action roguelike
make space sandbox shooter
make roguelike rpg
make civilization-like turn-based strategy
make xcom-like turn-based strategy
make aoe-like real-time strategy

chunk and tile are internal classes not available to public

requests are made to world
	then passed down to chunk
		then passed down to tile

world += request
world += entity

entities are abstract so need to be stored as base pointers
requests are abstract so need to be stored as base pointers
tiles are concrete

tiles store entities via unordered_set
	tile[id] returns entity
chunks store tiles via unordered_set
	chunk[pos] returns tile
world stores chunks via unordered_set
	world[coord] returns chunk
		compares coord to chunk range

